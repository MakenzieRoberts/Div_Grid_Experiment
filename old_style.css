/* This is just a proof of concept... CSS would be a lot less messy if I used classes instead of id, but that's for future me to deal with. */

/* TODO: Create constants for box width/height */

html {
	box-sizing: border-box;
}

#column-number-labels,
#row-a,
#row-b,
#row-c,
#row-d,
#row-e,
#row-f,
#row-g,
#row-h,
#row-i,
#row-j {
	display: grid;
	grid-template-columns: auto auto auto auto auto auto auto auto auto auto auto;
	height: fit-content;
	width: fit-content;
	background-color: white;
	/* padding-left: 20px; */
}

.label {
	width: 20px;
	height: 20px;
	border: 1px solid white;
	text-align: center;
}

._1 {
	width: 20px;
	height: 20px;
	border: 1px solid blue;
}
._2 {
	width: 20px;
	height: 20px;
	border: 1px solid green;
}
._3 {
	width: 20px;
	height: 20px;
	border: 1px solid lime;
}
._4 {
	width: 20px;
	height: 20px;
	border: 1px solid yellow;
}
._5 {
	width: 20px;
	height: 20px;
	border: 1px solid orange;
}
._6 {
	width: 20px;
	height: 20px;
	border: 1px solid red;
}
._7 {
	width: 20px;
	height: 20px;
	border: 1px solid pink;
}
._8 {
	width: 20px;
	height: 20px;
	border: 1px solid magenta;
}
._9 {
	width: 20px;
	height: 20px;
	border: 1px solid purple;
}
._10 {
	width: 20px;
	height: 20px;
	border: 1px solid purple;
}

/* Solution 3 - Newest Solution ðŸ˜Š (automatically fills row. Cuts down on code by 10x!) 
This removes the need for row/column labels outside the grid. This way, the new grid labels can be easily toggled on and off during development*/
#row-a,
#row-b,
#row-c #row-d #row-e #row-f #row-g #row-h #row-i #row-j {
	counter-reset: col-counter 0;
}
.a:nth-child(1n):before,
.b:nth-child(1n):before,
.c:nth-child(1n):before,
.d:nth-child(1n):before,
.e:nth-child(1n):before,
.f:nth-child(1n):before,
.g:nth-child(1n):before,
.h:nth-child(1n):before,
.i:nth-child(1n):before,
.j:nth-child(1n):before {
	/* 
    !NOTE(content: attr(id);) - Could also use attr(class); instead but it has an underscore so I used id  
    instead 
  */
	display: flex;
	align-items: center;
	justify-content: center;
	color: grey;
	content: attr(id);
	font-size: 8pt;
	font-weight: bold;
	height: 100%;
	text-transform: uppercase;
}

/*
------------------------- â–¼ â–¼ â–¼ -------------------------
Solution 2 - Old Solution (This does the same thing as newest solution, but I wanted to cut down on the amount of code and put them all in one selector. That caused some problems with the content property so I had to use attr(id) instead of manually putting the row letter then increment the column number usering a counter. I learned a lot in the process though! */
/* #row-b {
	counter-reset: col-counter 0;
}
.b:nth-child(1n):before {
	font-size: x-small;
	background-color: pink;

	counter-increment: col-counter;
	content: "B" counter(col-counter);
}

#row-c {
	counter-reset: col-counter 0;
}
.c:nth-child(1n):before {
	font-size: x-small;
	background-color: pink;

	counter-increment: col-counter;
	content: "C" counter(col-counter);
}

#row-d {
	counter-reset: col-counter 0;
}
.d:nth-child(1n):before {
	font-size: x-small;
	background-color: pink;

	counter-increment: col-counter;
	content: "D" counter(col-counter);
}

#row-e {
	counter-reset: col-counter 0;
}
.e:nth-child(1n):before {
	font-size: x-small;
	counter-increment: col-counter;
	content: "E" counter(col-counter);
}

#row-f {
	counter-reset: col-counter 0;
}
.f:nth-child(1n):before {
	font-size: x-small;
	counter-increment: col-counter;
	content: "F" counter(col-counter);
}

#row-g {
	counter-reset: col-counter 0;
}
.g:nth-child(1n):before {
	font-size: x-small;
	counter-increment: col-counter;
	content: "G" counter(col-counter);
}

#row-h {
	counter-reset: col-counter 0;
}
.h:nth-child(1n):before {
	font-size: x-small;
	counter-increment: col-counter;
	content: "H" counter(col-counter);
}

#row-i {
	counter-reset: col-counter 0;
}
.i:nth-child(1n):before {
	font-size: x-small;
	counter-increment: col-counter;
	content: "I" counter(col-counter);
}

#row-j {
	counter-reset: col-counter 0;
}
.j:nth-child(1n):before {
	font-size: x-small;
	counter-increment: col-counter;
	content: "J" counter(col-counter);
} 
------------------------- â–² â–² â–² -------------------------
*/

/*
------------------------- â–¼ â–¼ â–¼ -------------------------
Solution 1 - Oldest Solution (Requires code for every single box) 
*/
/* .a:nth-child(1)::before {
	counter-increment: col-counter;
	content: "A" counter(col-counter);
	width: 20px;
	text-align: center;
}

.a:nth-child(2)::before {
	counter-increment: col-counter;
	content: "A" counter(col-counter);
	width: 20px;
	text-align: center;
} 

... Then .b:nth-child(1), .b:nth-child(2), .c:nth-child(1), .b:nth-child(2), etc...
------------------------- â–² â–² â–² ------------------------- */
/* Row Labels */
/* #row-a:before {
	content: "A";
	width: 20px;
	text-align: center;
}
#row-b:before {
	content: "B";
	width: 20px;
	text-align: center;
}
#row-c:before {
	content: "C";
	width: 20px;
	text-align: center;
}
#row-d:before {
	content: "D";
	width: 20px;
	text-align: center;
}
#row-e:before {
	content: "E";
	width: 20px;
	text-align: center;
}
#row-f:before {
	content: "F";
	width: 20px;
	text-align: center;
}
#row-g:before {
	content: "G";
	width: 20px;
	text-align: center;
}
#row-h:before {
	content: "H";
	width: 20px;
	text-align: center;
}
#row-i:before {
	content: "I";
	width: 20px;
	text-align: center;
}
#row-j:before {
	content: "J";
	width: 20px;
	text-align: center;
} */

/* ---------------- PIXEL ART EXAMPLE ---------------- */

/* #c4, #c5, #c6, #c7, #c8, #d3, #d9, #e2, #e5, #e7, #e10, #f2, #f10, #g2, #g4, #g8, #g10, #h2, #h5, #h6, #h7, #h10, #i3, #i9, #j4, #j5, #j6, #j7, #j8{
  background-color: black;
}

#d4, #d5, #d6, #d7, #d8, #e3, #e4, #e6, #e8, #e9, #f3, #f4, #f5,#f6, #f7, #f8, #f9, #g3, #g5, #g6, #g7, #g9, #h3, #h4, #h8, #h9, #i4, #i5, #i6, #i7, #i8{
  background-color: yellow;
} */

/* ---------------- PIXEL ART EXAMPLE ---------------- */
